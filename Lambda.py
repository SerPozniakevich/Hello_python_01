# LECTION 3 LAMBDA
#--------------------------------------------------------------

# def f (x):         # присваивание переменной функцию 
#     return x**2

# g = f

# print(type(f))
# print(type(g))

# print(f(4))
# print(g(4))

# Функция функций с одной переменной

# def calc1(x):
#     return x + 10

# def calc2(x):
#     return x * 10

# def math(op, x):
#     print(op(x))

# Функция функций с двумя переменными

# def sum(x, y):
#     return x + y

# sum = lambda x, y: x + y # Упрощённая версия записи функции (Лямбда)


# def mult(x, y):
#     return x * y

# def calc(op, a, b):
#     print(op(a, b))   

# calc(lambda x, y: x + y, 4, 5) # Лямбду можно прописать в вызов функции

# calc(sum, 4, 5) # вызываем конкретную функцию

# List Comprehension  - упрощённое создание списков
# 1. [exp for item in iterable] - exp - название, iterable - условие
# 2. [exp for item in iterable (if conditional)]
# [exp <if condetional> for item in iterable (if conditional)] - не использовать)))

# list = []  # обычное создание листа

# for i  in range(1, 100):
#     list.append(i)
# print(list)

# list = [i for i in range(1, 21)] # создание списка без условий
# print(list)

# list = [i for i in range(1, 21) if i % 2 == 0] # создание списка с условиями
# print(list)

# list = [(i, i) for i in range(1, 21) if i % 2 == 0] # создание списка кортежей с условиями
# print(list)

# создание списка кортежей (число и его куб) с условиями и функцией
#-------------------------------------------------------------------
# def f(x):
#     return x ** 3

# list = [(i, f(i)) for i in range(1, 21) if i % 2 == 0]
# print(list)

#Создание кортежа (число и его квадрат) из списка из файла
#-----------------------------------------------------------
# with open('file_lam.txt', 'w') as num_list:
#     num_list.write('1 2 3 5 8 15 23 38')

# patch = 'file_lam.txt' # создание пути к файлу
# f = open(patch, 'r') # передача переменной данных файла в режиме чтения
# data = f.read() + ' ' # считывание из файла  в переменную data с добавлением пробела
# f.close()             # закрытие файла

# num_list = []         # создание списка пустого

# while data != '':    # пребегаемся по строке с проверкой "пока строка не пустая" ковычки без пробела!!!
#     space_pos = data.index(' ') # поиск первого пробела
#     num_list.append(int(data[:space_pos])) # записываем всё, что находится до пробела в формате int
#     data = data[space_pos + 1 :] # обновляем список, указывая, что "записанное" не использовать

# num_pos = []     # создаём список чётных чисел

# for e in num_list: # пока е в списке 
#     if not e % 2:  # проверка на чётность
#         num_pos.append((e, e ** 2)) # добавление в кортеж числа и квадрат этого числа
# print(num_pos)


#Создание кортежа (число и его квадрат) из списка из файла при помощи lambda
#----------------------------------------------------------------------------

# def select(f, col):     # функция принимает в качестве аргумента какую-то функцию и набор данных
#     return [f(x) for x in col] # формирование списка по условиям функции, пока х в col

# def where (f, col):     # функция принимает в качестве аргумента какую-то функцию и набор данных
#     return [x for x in col if f(x)] # формирование списка, пока х в col если "ф от х"(фильтрация) (???)

# patch = 'file_lam.txt' # создание пути к файлу
# f = open(patch, 'r') # передача переменной данных файла в режиме чтения
# data = f.read().split() # считывание из файла  в переменную data с добавлением пробела
# f.close() 
# # data = '1 2 3 5 8 15 23 38'.split()

# res = select(int, data) # создаём список при помощи функции, преобразования в int списка из data
# res = where(lambda x: not x % 2, res) # запуск функции с проверкой на чётность, преобразованного списка res
# res = select(lambda x: (x, x ** 2), res) # запуск функции с заполнением кортежа по условиям, преобразованного списка res
# print(res)

# Встроенная функция "map" фильрации в Питоне?
#-----------------------------------------

# li = [x for x in range(1, 20)] # упрощённое создание списка

# li = list(map(lambda x : x + 10, li)) # новый список данных при помощи "map", первый аргум. число увеличивает на 10, второй арг. - набор данных


# print(li)

# Встроенная функция "map" с формирование списка чисел при вводе с клавы
#------------------------------------------------------------------------

# data = list(map(int, input('Введите числа через пробел: ').split()))

# print(data)

#Создание кортежа (число и его квадрат) из списка из файла при помощи lambda и map
#---------------------------------------------------------------------------------

# def where (f, col):     # функция принимает в качестве аргумента какую-то функцию и набор данных
#     return [x for x in col if f(x)] # формирование списка, пока х в col если "ф от х"(фильтрация) (???)

# patch = 'file_lam.txt' # создание пути к файлу
# f = open(patch, 'r') # передача переменной данных файла в режиме чтения
# data = f.read().split() # считывание из файла  в переменную data с добавлением пробела
# f.close() 
# # data = '1 2 3 5 8 15 23 38'.split()

# res = map(int, data) # создаём список при помощи функции, преобразования в int списка из data
# res = where(lambda x: not x % 2, res) # запуск функции с проверкой на чётность, преобразованного списка res
# res = list(map(lambda x: (x, x ** 2), res)) # запуск функции с заполнением кортежа по условиям, преобразованного списка res
# print(res)

#Создание кортежа (число и его квадрат) из списка из файла при помощи lambda и map и filter
#-------------------------------------------------------------------------------------------

# patch = 'file_lam.txt' # создание пути к файлу
# f = open(patch, 'r') # передача переменной данных файла в режиме чтения
# data = f.read().split() # считывание из файла  в переменную data с добавлением пробела
# f.close() 
# # data = '1 2 3 5 8 15 23 38'.split()

# res = map(int, data) # создаём список при помощи функции, преобразования в int списка из data
# res = list(filter(lambda x: not x % 2, res)) # запуск функции с проверкой на чётность, преобразованного списка res
# res = list(map(lambda x: (x, x ** 2), res)) # запуск функции с заполнением кортежа по условиям, преобразованного списка res
# print(res)

# ZIP позволяет получать новый набор данных из других списков
#------------------------------------------------------------

# users = ['user1', 'user2', 'user3', 'user4', 'user5'] # first list
# ids = [4, 5, 9, 14, 7]                               # second list
# salary = [111,222,333] # если какой-то набор имеет меньшую длину, то результат будет по длине кротчайшего

# list_new = list(zip(users, ids, salary))
# print(list_new)

#ENUMERATE функция нумерования списка ввиде кортежа

users = ['user1', 'user2', 'user3', 'user4', 'user5'] # first list

list_new = list(enumerate(users))
print(list_new)
